import os
from urllib.parse import urlparse

from pymacaroons import Macaroon
from webapp.api import sso

from talisker import logging

LOGIN_URL = os.getenv("LOGIN_URL", "https://login.ubuntu.com")

PERMISSIONS = [
    "edit_account",
    "package_access",
    "package_metrics",
    "package_register",
    "package_release",
    "package_update",
    "package_upload_request",
    "store_admin",
]


def get_authorization_header(root, discharge):
    """
    Bind root and discharge macaroons and return the authorization header.
    """

    bound = Macaroon.deserialize(root).prepare_for_request(
        Macaroon.deserialize(discharge)
    )

    logging.getLogger("talisker.wsgi").error("AUTH_DEUBG", extra={
        "method:get_authorization_header": True,
        "bound": bound.serialize()
    })

    return "Macaroon root={}, discharge={}".format(root, bound.serialize())


def is_authenticated(session):
    """
    Checks if the user is authenticated from the session
    Returns True if the user is authenticated
    """
    is_authed =  (
        "publisher" in session
        and "macaroon_discharge" in session
        and "macaroon_root" in session
    ) or ("publisher" in session and "macaroons" in session)

    if not is_authed:
        logging.getLogger("talisker.wsgi").error("AUTH_DEUBG", extra={
            "method:is_authenticated": True,
            "publisher": "publisher" in session,
            "macaroon_discharge": "macaroon_discharge" in session,
            "macaroon_root": "macaroon_root" in session,
            "macaroons": "macaroons" in session,
        })

    return is_authed


def empty_session(session):
    """
    Empty the session, used to logout.
    """
    session.pop("macaroons", None)
    session.pop("macaroon_root", None)
    session.pop("macaroon_discharge", None)
    session.pop("publisher", None)
    session.pop("user_shared_snaps", None)
    session.pop("github_auth_secret", None)


def get_caveat_id(root):
    """
    Returns the caveat_id generated by the SSO
    """
    location = urlparse(LOGIN_URL).hostname
    (caveat,) = [
        c
        for c in Macaroon.deserialize(root).third_party_caveats()
        if c.location == location
    ]

    logging.getLogger("talisker.wsgi").error("AUTH_DEUBG", extra={
        "method:get_caveat_id": True,
        "caveat": caveat.caveat_id
    })

    return caveat.caveat_id


def request_macaroon():
    """
    Request a macaroon from dashboard.
    Returns the macaroon.
    """
    response = sso.post_macaroon({"permissions": PERMISSIONS})

    logging.getLogger("talisker.wsgi").error("AUTH_DEUBG", extra={
        "method:request_macaroon": True,
        "macaroon": response["macaroon"]
    })

    return response["macaroon"]


def get_refreshed_discharge(discharge):
    """
    Get a refresh macaroon if the macaroon is not valid anymore.
    Returns the new discharge macaroon.
    """
    response = sso.get_refreshed_discharge({"discharge_macaroon": discharge})

    logging.getLogger("talisker.wsgi").error("AUTH_DEUBG", extra={
        "method:get_refreshed_discharge": True,
        "discharge_macaroon": response["discharge_macaroon"]
    })


    return response["discharge_macaroon"]


def is_macaroon_expired(headers):
    """
    Returns True if the macaroon needs to be refreshed from
    the header response.
    """
    logging.getLogger("talisker.wsgi").error("AUTH_DEUBG", extra={
        "method:is_macaroon_expired": True,
        "has_expired": headers.get("WWW-Authenticate") == ("Macaroon needs_refresh=1")
    })
    return headers.get("WWW-Authenticate") == ("Macaroon needs_refresh=1")
